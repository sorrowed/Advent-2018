00	addi 4 16 4	; GOTO 17	// PC = 0 + 16 + 1
01	seti 1 5 1	; A = 1	
02	seti 1 7 3	; D = 1	
03	mulr 1 3 5	; E = B * D	
04	eqrr 5 2 5	; 	
05	addr 5 4 4	; IF E == C THEN GOTO 7	
06	addi 4 1 4	; GOTO 8
07	addr 1 0 0	; A = A + B
08	addi 3 1 3	; D = D + 1
09	gtrr 3 2 5	; 
10	addr 4 5 4	; IF D > C GOTO 12
11	seti 2 4 4	; GOTO 3
12	addi 1 1 1	; B = B + 1
13	gtrr 1 2 5	;
14	addr 5 4 4	; IF B > C GOTO 16
15	seti 1 5 4	; GOTO 2
16	mulr 4 4 4	; EXIT A    // PC = 1 + PC * PC
17	addi 2 2 2	; C = C + 2
18	mulr 2 2 2	; C = C * C
19	mulr 4 2 2	; C = C * 19
20	muli 2 11 2	; C = C * 11
21	addi 5 2 5	; E = E + 2
22	mulr 5 4 5	; E = E * 22
23	addi 5 18 5	; E = E + 18
24	addr 2 5 2	; C = C + E
25	addr 4 0 4	; GOTO 26 + A   // IF A == 0 THEN C = 898 ELSE C = 10551298
26	seti 0 6 4	; GOTO 1	
27	setr 4 3 5	; E = 27
28	mulr 5 4 5	; E = E * 28
29	addr 4 5 5	; E = E + 29
30	mulr 4 5 5	; E = E * 30
31	muli 5 14 5	; E = E * 14
32	mulr 5 4 5	; E = E * 32
33	addr 2 5 2	; C = C + E
34	seti 0 2 0	; A = 0
35	seti 0 6 4	; GOTO 1


registers[0]=A
registers[1]=B
registers[2]=C
registers[3]=D 
registers[5]=E 
registers[4]=PC

NB 17 ~ 35 : C = 10551298, GOTO 1

So ... 
00	seti 10551298 0 2; C = 10551298
01	seti 1 5 1	; A = 1	
02	seti 1 7 3	; D = 1	
03	mulr 1 3 5	; E = B * D	
04	eqrr 5 2 5	; 	
05	addr 5 4 4	; IF E == C THEN GOTO 7	
06	addi 4 1 4	; GOTO 8
07	addr 1 0 0	; A = A + 1
08	addi 3 1 3	; D = D + 1
09	gtrr 3 2 5	; 
10	addr 4 5 4	; IF D > C GOTO 12
11	seti 2 4 4	; GOTO 3
12	addi 1 1 1	; B = B + 1
13	gtrr 1 2 5	;
14	addr 5 4 4	; IF B > C GOTO 16
15	seti 1 5 4	; GOTO 2
16	mulr 4 4 4	; EXIT?	// PC = 1 + PC * PC

Translating that into C++:

uint64_t factors()
{
	const uint64_t C = 10551298;

	uint64_t A = 1;

	for( uint64_t B = 0; B <= C; ++B ) {

		for( uint64_t D = 1; D <= C; ++D ) {

			if( B * D == C ) {
				A += B;
			}
		}
	}

	return A;
}

Optimizing and fluffing that a bit:

uint64_t factors( uint64_t val )
{
	uint64_t A = 0;

	for( uint64_t B = 1; B <= val; ++B ) {
		for( uint64_t D = 1; D <= val / B; ++D ) {

			if( B * D == val ) {
				A += B;
			}
		}
	}

	return A;
}

uint64_t r[] = { test2( 898 ), test2( 10551298 ) }; this then yields {1350, 15844608}
